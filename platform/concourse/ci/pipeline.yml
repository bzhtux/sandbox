---
anchors:
  notify-slack: &notify-slack
    on_failure:
      do:
      - put: notify
        inputs: ['ci-repo']
        params:
          alert_type: failed
    on_error:
      do:
      - put: notify
        inputs: ['ci-repo']
        params:
          alert_type: failed

groups:
- name: full
  jobs:
  - terraform-plan
  - terraform-apply
  - BOSH
  - terraform-destroy
  - configure-UAA
  - BOSH-delete-env
  - CREDHUB
  - CONCOURSE
- name: deploy
  jobs:
  - terraform-plan
  - terraform-apply
  - BOSH
  - configure-UAA
  - CREDHUB
  - CONCOURSE
- name: delete
  jobs:
  - terraform-destroy
  - BOSH-delete-env     

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-alert
  type: docker-image
  source:
    repository: arbourd/concourse-slack-alert-resource    

resources:
- name: notify
  type: slack-alert
  source:
    url: ((slack.webhook))
  icon: slack

- name: ci-repo
  type: git
  source:
    uri: ((github.url)):((github.user))/((github.repo)).git
    branch: feat/run-local-ci
    private_key: ((github_key))
    paths:
    - platform
  icon: git

- name: ci-image
  type: docker-image
  source: 
    repository: bzhtux/pivotal
    tag: debian
  icon: docker

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: bzhtux-tf-state
      prefix: concourse/((iaas))
      credentials: ((gcp.credentials))
  icon: docker

- name: gcp-creds
  type: gcs
  source:
      bucket: gcp-creds
      regexp: concourse-(.*).json
      json_key: ((gcp.credentials))
  icon: harddisk

- name: bosh-states
  type: gcs
  source:
      bucket: bosh-states
      regexp: mgmt/((iaas))/state-(.*).json
      json_key: ((gcp.credentials))
  icon: harddisk

- name: bosh-creds
  type: gcs
  source:
      bucket: bosh-creds
      regexp: mgmt/((iaas))/creds-(.*).json
      json_key: ((gcp.credentials))
  icon: harddisk

jobs:
- name: terraform-plan
  plan:
  - in_parallel:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: gcp-creds
      <<: *notify-slack
  - put: terraform
    params:
      env_name: ((iaas))
      plan_only: true
      terraform_source: ci-repo/platform/concourse/terraform/((iaas))
      vars:
        gcp_creds: ((gcp.credentials))
        ssh_pub_key: ((ssh.pub_key))
        ssh_user: ((ssh.user)) 
        ssh_priv_key: ((ssh.priv_key))
    <<: *notify-slack

- name: terraform-apply
  plan:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: gcp-creds
      <<: *notify-slack
    - get: terraform
      trigger: true
      passed: [terraform-plan]
    - put: terraform
      params:
        env_name: ((iaas))
        plan_run: true
        terraform_source: ci-repo/platform/concourse/terraform/((iaas))
        env:
          TF_LOG: DEBUG        
        vars:
          gcp_creds: ((gcp.credentials))   
          ssh_pub_key: ((ssh.pub_key)) 
          ssh_user: ((ssh.user)) 
          ssh_priv_key: ((ssh.priv_key))
      <<: *notify-slack

- name: terraform-destroy
  plan:
    - get: ci-repo
      <<: *notify-slack
    - get: terraform
      trigger: false
      passed: [terraform-apply]
    - put: terraform
      params:
        action: destroy
        env_name: ((iaas))          
        terraform_source: ci-repo/platform/concourse/terraform/((iaas))
        env:
          TF_LOG: DEBUG                  
        vars:
          gcp_creds: ((gcp.credentials))
          ssh_pub_key: ((ssh.pub_key))
          ssh_user: ((ssh.user)) 
          ssh_priv_key: ((ssh.priv_key))     
      get_params:
        action: destroy
      <<: *notify-slack

- name: BOSH
  plan:
  - in_parallel:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: terraform
      trigger: true
      passed: [terraform-apply]
  - task: deploy
    image: ci-image
    file: "ci-repo/platform/bosh/ci/task.yml"
    params:
      SSH_PRIV_KEY: ((ssh.priv_key))
      SSH_USERNAME: ((ssh.user))
    <<: *notify-slack
  - put: bosh-states
    inputs: [bosh-state]
    params:
      file: bosh-state/state-*.json
  - put: bosh-creds
    inputs: [bosh-creds]
    params:
      file: bosh-creds/creds-*.yml

- name: configure-UAA
  plan:
  - in_parallel:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: terraform
      trigger: true
      passed: [BOSH]      
  - task: configure uaa for credhub deployment
    image: ci-image
    file: "ci-repo/platform/uaa/ci/credhub.yml"

- name: BOSH-delete-env
  plan:
  - in_parallel:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: terraform
      trigger: true
      passed: [BOSH]
  - task: deploy
    image: ci-image
    file: "ci-repo/platform/bosh/ci/delete.yml"
    params:
      SSH_PRIV_KEY: ((ssh.priv_key))
      SSH_USERNAME: ((ssh.user))
    <<: *notify-slack

- name: CREDHUB
  plan:
  - in_parallel:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: terraform
      trigger: true
      passed: [configure-UAA]
  - task: deploy
    image: ci-image
    file: "ci-repo/platform/credhub/ci/task.yml"
    params:
      SSH_PRIV_KEY: ((ssh.priv_key))
      SSH_USERNAME: ((ssh.user))
    <<: *notify-slack

- name: CONCOURSE
  plan:
  - in_parallel:
    - get: ci-repo
      <<: *notify-slack
    - get: ci-image
      <<: *notify-slack
    - get: terraform
      trigger: true
      passed: [CREDHUB]
  - task: deploy
    image: ci-image
    file: "ci-repo/platform/concourse/ci/task.yml"
    params:
      SSH_PRIV_KEY: ((ssh.priv_key))
      SSH_USERNAME: ((ssh.user))
    <<: *notify-slack